{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","notes.js","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","title","className","Footer","currentYear","Date","getFullYear","Note","id","content","onClick","CreateArea","props","useState","formText","setFormText","handleChange","event","name","target","value","prevState","placeholder","onChange","rows","preventDefault","onSubmit","notes","App","state","notesCollection","setNotes","deleteNote","index","filter","note","i","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAUeA,G,MARA,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAChB,OACE,4BAAQC,UAAU,YAChB,wBAAIA,UAAU,kBAAkBD,MCMvBE,EATA,WACb,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OACE,4BAAQJ,UAAU,YAChB,uBAAGA,UAAU,4BAAb,aAAmDE,EAAnD,OCQSG,EAZF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,GAAIP,EAA8B,EAA9BA,MAAOQ,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAClC,OACE,yBAAKR,UAAU,UACb,wBAAIA,UAAU,iBAAiBD,GAC/B,uBAAGC,UAAU,mBAAmBO,GAChC,4BAAQC,QAAS,kBAAMA,EAAQF,IAAKN,UAAU,sBAA9C,Y,cC8CSS,MAnDf,SAAoBC,GAAQ,IAAD,EACOC,mBAAS,CACvCZ,MAAO,GACPQ,QAAS,KAHc,mBAClBK,EADkB,KACRC,EADQ,KAMnBC,EAAe,SAAAC,GACnB,IAAMC,EAAOD,EAAME,OAAOD,KACpBE,EAAQH,EAAME,OAAOC,MAC3BL,GAAY,SAAAM,GAAS,sBAChBA,EADgB,eAElBH,EAAOE,QAIZ,OACE,6BACE,0BAAMlB,UAAU,UACd,2BACEA,UAAU,gBACVgB,KAAK,QACLI,YAAY,QACZC,SAAUP,EACVI,MAAON,EAASb,QAElB,8BACEC,UAAU,kBACVgB,KAAK,UACLI,YAAY,iBACZE,KAAK,IACLD,SAAUP,EACVI,MAAON,EAASL,UAElB,4BACEP,UAAU,cACVQ,QAAS,SAAAO,GACPA,EAAMQ,iBACNb,EAAMc,SAASZ,GACfC,EAAY,CACVd,MAAO,GACPQ,QAAS,OAPf,UCtBOkB,EAbD,CACZ,CACE1B,MAAO,YACPQ,QACE,4EAEJ,CACER,MAAO,gBACPQ,QACE,qICqCSmB,EAtCH,WACV,IAAMC,EAAQhB,mBAASc,GADP,cAEoBE,EAFpB,GAETC,EAFS,KAEQC,EAFR,KAUVC,EAAa,SAAAC,GACjBF,GAAS,SAAAV,GACP,OAAOA,EAAUa,QAAO,SAACC,EAAMC,GAC7B,OAAOA,IAAMH,SAKnB,OACE,yBAAK/B,UAAU,SACb,kBAAC,EAAD,CAAQD,MAAM,qBACd,kBAAC,EAAD,CAAYyB,SAjBA,SAAAZ,GACK,KAAnBA,EAASb,OACc,KAArBa,EAASL,SACTsB,GAAS,SAAAV,GAAS,4BAAQA,GAAR,CAAmBP,UAepCgB,EAAgBO,KAAI,SAACF,EAAMF,GAC1B,OACE,kBAAC,EAAD,CACEK,IAAKL,EACLzB,GAAIyB,EACJhC,MAAOkC,EAAKlC,MACZQ,QAAS0B,EAAK1B,QACdC,QAASsB,OAIf,kBAAC,EAAD,QC7BcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.18e9eb6a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = ({ title }) => {\n  return (\n    <header className=\"c-header\">\n      <h1 className=\"c-header__text\">{title}</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  const currentYear = new Date().getFullYear();\n  return (\n    <footer className=\"c-footer\">\n      <p className=\"c-footer__copyright-text\">Copyright {currentYear}.</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst Note = ({ id, title, content, onClick }) => {\n  return (\n    <div className=\"c-note\">\n      <h1 className=\"c-note__title\">{title}</h1>\n      <p className=\"c-note__content\">{content}</p>\n      <button onClick={() => onClick(id)} className=\"c-note__btn-delete\">\n        DELETE\n      </button>\n    </div>\n  );\n};\n\nexport default Note;\n","import React, { useState } from \"react\";\n\nfunction CreateArea(props) {\n  const [formText, setFormText] = useState({\n    title: \"\",\n    content: \"\"\n  });\n\n  const handleChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setFormText(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  return (\n    <div>\n      <form className=\"c-form\">\n        <input\n          className=\"c-form__title\"\n          name=\"title\"\n          placeholder=\"Title\"\n          onChange={handleChange}\n          value={formText.title}\n        />\n        <textarea\n          className=\"c-form__content\"\n          name=\"content\"\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n          onChange={handleChange}\n          value={formText.content}\n        />\n        <button\n          className=\"c-form__btn\"\n          onClick={event => {\n            event.preventDefault();\n            props.onSubmit(formText);\n            setFormText({\n              title: \"\",\n              content: \"\"\n            });\n          }}\n        >\n          Add\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","const notes = [\n  {\n    title: \"Reminder!\",\n    content:\n      \"This is a note-taking app to keep all of your random notes in one place!\"\n  },\n  {\n    title: \"Instructions!\",\n    content:\n      \"Enter a title and note text in the above form to create a note. Delete me by clicking the button below when you're done with me.\"\n  }\n];\n\nexport default notes;\n","import React, { useState } from \"react\";\nimport \"../styles/App.scss\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\nimport notes from \"../notes\";\n\nconst App = () => {\n  const state = useState(notes);\n  const [notesCollection, setNotes] = state;\n\n  const addNote = formText => {\n    formText.title !== \"\" &&\n      formText.content !== \"\" &&\n      setNotes(prevState => [...prevState, formText]);\n  };\n\n  const deleteNote = index => {\n    setNotes(prevState => {\n      return prevState.filter((note, i) => {\n        return i !== index;\n      });\n    });\n  };\n\n  return (\n    <div className=\"c-App\">\n      <Header title=\"Keeper App Clone\" />\n      <CreateArea onSubmit={addNote} />\n      {notesCollection.map((note, index) => {\n        return (\n          <Note\n            key={index}\n            id={index}\n            title={note.title}\n            content={note.content}\n            onClick={deleteNote}\n          />\n        );\n      })}\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.jsx\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}